thing Post {
    #dbObject // Means that this object is supposed to also be stored in a database and
    // be managed by Joy's ORM
    #jsonObject // Means that this particular constructor supports JSON (de)serialization
    // This tag is used in constructor-level and not thing-level, as the thing may have multiple
    // ctors (like Error or null), which are of course not meant to be sent through JSON in this manner
    Post(
       #dbId /* Optional as the name is "id" */ #jsonIgnore(default: 0) u5 id // Won't be serialized, the default value will be assigned in deserialization
       #json("PostTitle") /* Json tag used for each property, optional */ str title,
       str body->vMaxLength(1000),
       #dbDate str date,
       str author,
       str permalink->vPermalink
    )
}

// Contracts are the same as Interfaces or Traits in other languages
cont ThingThatGetsStoredInDatabase {
    bit isPublic()
    bit isUserContent(bit isFromEu)
}

// The Implement keyword is used to implement a contract...
impl Post:ThingThatGetsStoredInDatabase {
    bit isPublic() {
        return true
    }

    bit isUserContent(bit isFromEu) {
        if(isFromEu) {
            return true
        }
        
        return false
    }
}

// .. or functions related to the thing, can be called this way: Post.delete()
impl Post {
    noth delete(u5 id) {
        // Implementation to delete the post from the database
    }
}

// TODO: As there can be validators in fields, making things will need to return a result aka. bomb